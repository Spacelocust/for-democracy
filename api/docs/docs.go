// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Support Team",
            "email": "support@for-democracy"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/:provider": {
            "get": {
                "description": "Route used to authenticate the user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Authenticate the user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/goth.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        },
        "/auth/:provider/callback": {
            "get": {
                "description": "Route used by the provide to send the user back after authentication",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Get the user after authentication is complete from the provider",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider name",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/goth.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "description": "Get all events",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Get all events",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.Event"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        },
        "/logout/:provider": {
            "get": {
                "description": "Route used to log the user out",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Log the user out",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider name",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        },
        "/planets": {
            "get": {
                "description": "Get all planets",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "planets"
                ],
                "summary": "Get all planets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Planet"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        },
        "/planets/{id}": {
            "get": {
                "description": "Get planet by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "planets"
                ],
                "summary": "Get planet by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Planet ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Planet"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "fiber.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "goth.User": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "accessTokenSecret": {
                    "type": "string"
                },
                "avatarURL": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "idtoken": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nickName": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "rawData": {
                    "type": "object",
                    "additionalProperties": true
                },
                "refreshToken": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "handler.Event": {
            "type": "object",
            "properties": {
                "defence": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Defence"
                    }
                },
                "liberation": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Liberation"
                    }
                }
            }
        },
        "model.Biome": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "planets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Planet"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.Defence": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "endAt": {
                    "type": "string"
                },
                "ennemyHealth": {
                    "type": "integer"
                },
                "ennemyMaxHealth": {
                    "type": "integer"
                },
                "health": {
                    "type": "integer"
                },
                "helldiversID": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "planetID": {
                    "type": "integer"
                },
                "startAt": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.Effect": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "planets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Planet"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.Liberation": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "health": {
                    "type": "integer"
                },
                "helldiversID": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "planetID": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.Planet": {
            "type": "object",
            "properties": {
                "biome": {
                    "$ref": "#/definitions/model.Biome"
                },
                "biomeID": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "defence": {
                    "$ref": "#/definitions/model.Defence"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "disabled": {
                    "type": "boolean"
                },
                "effects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Effect"
                    }
                },
                "health": {
                    "type": "integer"
                },
                "helldiversID": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "imageURL": {
                    "type": "string"
                },
                "liberation": {
                    "$ref": "#/definitions/model.Liberation"
                },
                "maxHealth": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "players": {
                    "type": "integer"
                },
                "positionX": {
                    "type": "number"
                },
                "positionY": {
                    "type": "number"
                },
                "regeneration": {
                    "type": "integer"
                },
                "statistic": {
                    "description": "InitialOwner         enum.Faction ` + "`" + `gorm:\"not null;type:faction\"` + "`" + `\nOwner                enum.Faction ` + "`" + `gorm:\"not null;type:faction\"` + "`" + `",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Statistic"
                        }
                    ]
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.Statistic": {
            "type": "object",
            "properties": {
                "accuracy": {
                    "type": "integer"
                },
                "automatonKills": {
                    "type": "integer"
                },
                "bugKills": {
                    "type": "integer"
                },
                "bulletsFired": {
                    "type": "integer"
                },
                "bulletsHit": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "deaths": {
                    "type": "integer"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "friendlyKills": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "illuminateKills": {
                    "type": "integer"
                },
                "index": {
                    "type": "integer"
                },
                "missionSuccessRate": {
                    "type": "integer"
                },
                "missionTime": {
                    "type": "integer"
                },
                "missionsWon": {
                    "type": "integer"
                },
                "planetID": {
                    "type": "integer"
                },
                "revives": {
                    "type": "integer"
                },
                "timePlayed": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "For Democracy API",
	Description:      "This is the API for For Democracy",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
