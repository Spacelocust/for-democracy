basePath: /
definitions:
  enum.Difficulty:
    enum:
    - trivial
    - easy
    - medium
    - challenging
    - hard
    - extreme
    - suicide_mission
    - impossible
    - helldive
    type: string
    x-enum-varnames:
    - Trivial
    - Easy
    - Medium
    - Challenging
    - Hard
    - Extreme
    - SuicideMission
    - Impossible
    - Helldive
  enum.Faction:
    enum:
    - humans
    - terminids
    - automatons
    - illuminates
    type: string
    x-enum-varnames:
    - Humans
    - Terminids
    - Automatons
    - Illuminates
  enum.ObjectiveType:
    enum:
    - terminate_illegal_broadcast
    - pump_fuel_to_icbm
    - upload_escape_pod_data
    - conduct_geological_survey
    - launch_icbm
    - retrieve_valuable_data
    - emergency_evacuation
    - spread_democracy
    - eliminate_brood_commanders
    - purge_hatcheries
    - activate_e710_pumps
    - nuke_nursery
    - activate_terminid_control_system
    - blitz_search_and_destroy_terminids
    - eliminate_chargers
    - eradicate_terminid_swarm
    - eliminate_bile_titans
    - enable_e710_extraction
    - eliminate_devastators
    - eliminate_automaton_hulks
    - sabotage_supply_bases
    - destroy_transmission_network
    - eradicate_automaton_forces
    - blitz_search_and_destroy_automatons
    - sabotage_air_base
    - eliminate_automaton_factory_strider
    - destroy_command_bunkers
    type: string
    x-enum-varnames:
    - TerminateIllegalBroadcast
    - PumpFuelToICBM
    - UploadEscapePodData
    - ConductGeologicalSurvey
    - LaunchICBM
    - RetrieveValuableData
    - EmergencyEvacuation
    - SpreadDemocracy
    - EliminateBroodCommanders
    - PurgeHatcheries
    - ActivateE710Pumps
    - NukeNursery
    - ActivateTerminidControlSystem
    - BlitzSearchAndDestroyTerminids
    - EliminateChargers
    - EradicateTerminidSwarm
    - EliminateBileTitans
    - EnableE710Extraction
    - EliminateDevastators
    - EliminateAutomatonHulks
    - SabotageSupplyBases
    - DestroyTransmissionNetwork
    - EradicateAutomatonForces
    - BlitzSearchAndDestroyAutomatons
    - SabotageAirBase
    - EliminateAutomatonFactoryStrider
    - DestroyCommandBunkers
  enum.Role:
    enum:
    - admin
    - user
    type: string
    x-enum-varnames:
    - Admin
    - User
  enum.StratagemKeys:
    enum:
    - up
    - right
    - down
    - left
    type: string
    x-enum-varnames:
    - Up
    - Right
    - Down
    - Left
  enum.StratagemType:
    enum:
    - supply
    - mission
    - defensive
    - offensive
    type: string
    x-enum-varnames:
    - Supply
    - Mission
    - Defensive
    - Offensive
  enum.StratagemUseType:
    enum:
    - self
    - team
    - shared
    type: string
    x-enum-varnames:
    - Self
    - Team
    - Shared
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  goth.User:
    properties:
      accessToken:
        type: string
      accessTokenSecret:
        type: string
      avatarURL:
        type: string
      description:
        type: string
      email:
        type: string
      expiresAt:
        type: string
      firstName:
        type: string
      idtoken:
        type: string
      lastName:
        type: string
      location:
        type: string
      name:
        type: string
      nickName:
        type: string
      provider:
        type: string
      rawData:
        additionalProperties: true
        type: object
      refreshToken:
        type: string
      userID:
        type: string
    type: object
  model.Biome:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      planets:
        items:
          $ref: '#/definitions/model.Planet'
        type: array
      updatedAt:
        type: string
    type: object
  model.Defence:
    properties:
      createdAt:
        type: string
      defenceHealthHistories:
        items:
          $ref: '#/definitions/model.DefenceHealthHistory'
        type: array
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      endAt:
        type: string
      enemyFaction:
        $ref: '#/definitions/enum.Faction'
      health:
        type: integer
      helldiversID:
        type: integer
      id:
        type: integer
      impactPerHour:
        type: number
      maxHealth:
        type: integer
      planet:
        $ref: '#/definitions/model.Planet'
      planetID:
        type: integer
      players:
        type: integer
      startAt:
        type: string
      updatedAt:
        type: string
    type: object
  model.DefenceHealthHistory:
    properties:
      createdAt:
        type: string
      defence:
        $ref: '#/definitions/model.Defence'
      defenceID:
        type: integer
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      health:
        type: integer
      id:
        type: integer
      updatedAt:
        type: string
    type: object
  model.Effect:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      planets:
        items:
          $ref: '#/definitions/model.Planet'
        type: array
      updatedAt:
        type: string
    type: object
  model.Feature:
    properties:
      code:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      enabled:
        type: boolean
      id:
        type: integer
      updatedAt:
        type: string
    type: object
  model.Group:
    properties:
      code:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      difficulty:
        $ref: '#/definitions/enum.Difficulty'
      groupUsers:
        items:
          $ref: '#/definitions/model.GroupUser'
        type: array
      id:
        type: integer
      missions:
        items:
          $ref: '#/definitions/model.Mission'
        type: array
      name:
        type: string
      planet:
        $ref: '#/definitions/model.Planet'
      planetID:
        type: integer
      public:
        type: boolean
      startAt:
        type: string
      updatedAt:
        type: string
    type: object
  model.GroupUser:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      groupID:
        type: integer
      groupUserMissions:
        items:
          $ref: '#/definitions/model.GroupUserMission'
        type: array
      id:
        type: integer
      owner:
        type: boolean
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/model.User'
      userID:
        type: integer
    type: object
  model.GroupUserMission:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      groupUser:
        $ref: '#/definitions/model.GroupUser'
      groupUserID:
        type: integer
      id:
        type: integer
      missionID:
        type: integer
      stratagems:
        items:
          $ref: '#/definitions/model.Stratagem'
        type: array
      updatedAt:
        type: string
    type: object
  model.Liberation:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      health:
        type: integer
      helldiversID:
        type: integer
      id:
        type: integer
      impactPerHour:
        type: number
      liberationHealthHistories:
        items:
          $ref: '#/definitions/model.LiberationHealthHistory'
        type: array
      planet:
        $ref: '#/definitions/model.Planet'
      planetID:
        type: integer
      players:
        type: integer
      regenerationPerHour:
        type: number
      updatedAt:
        type: string
    type: object
  model.LiberationHealthHistory:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      health:
        type: integer
      id:
        type: integer
      liberation:
        $ref: '#/definitions/model.Liberation'
      liberationID:
        type: integer
      updatedAt:
        type: string
    type: object
  model.Mission:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      groupID:
        type: integer
      groupUserMissions:
        items:
          $ref: '#/definitions/model.GroupUserMission'
        type: array
      id:
        type: integer
      instructions:
        type: string
      name:
        type: string
      objectiveTypes:
        items:
          $ref: '#/definitions/enum.ObjectiveType'
        type: array
      updatedAt:
        type: string
    type: object
  model.Objective:
    properties:
      difficulties:
        items:
          $ref: '#/definitions/enum.Difficulty'
        type: array
      factions:
        items:
          $ref: '#/definitions/enum.Faction'
        type: array
      missionTime:
        $ref: '#/definitions/time.Duration'
      objectiveType:
        $ref: '#/definitions/enum.ObjectiveType'
    type: object
  model.Planet:
    properties:
      backgroundURL:
        type: string
      biome:
        $ref: '#/definitions/model.Biome'
      biomeID:
        type: integer
      createdAt:
        type: string
      defence:
        $ref: '#/definitions/model.Defence'
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      disabled:
        type: boolean
      effects:
        items:
          $ref: '#/definitions/model.Effect'
        type: array
      group:
        items:
          $ref: '#/definitions/model.Group'
        type: array
      helldiversID:
        type: integer
      id:
        type: integer
      imageURL:
        type: string
      initialOwner:
        $ref: '#/definitions/enum.Faction'
      liberation:
        $ref: '#/definitions/model.Liberation'
      maxHealth:
        type: integer
      name:
        type: string
      owner:
        $ref: '#/definitions/enum.Faction'
      positionX:
        type: number
      positionY:
        type: number
      sector:
        $ref: '#/definitions/model.Sector'
      sectorID:
        type: integer
      statistic:
        $ref: '#/definitions/model.Statistic'
      updatedAt:
        type: string
      waypoints:
        items:
          $ref: '#/definitions/model.Waypoint'
        type: array
    type: object
  model.Sector:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      helldiversID:
        type: integer
      id:
        type: integer
      name:
        type: string
      planets:
        items:
          $ref: '#/definitions/model.Planet'
        type: array
      updatedAt:
        type: string
    type: object
  model.Statistic:
    properties:
      accuracy:
        type: number
      automatonKills:
        type: integer
      bugKills:
        type: integer
      bulletsFired:
        type: integer
      bulletsHit:
        type: integer
      createdAt:
        type: string
      deaths:
        type: integer
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      friendlyKills:
        type: integer
      helldiversID:
        type: integer
      id:
        type: integer
      illuminateKills:
        type: integer
      missionSuccessRate:
        type: number
      missionTime:
        type: integer
      missionsLost:
        type: integer
      missionsWon:
        type: integer
      planet:
        $ref: '#/definitions/model.Planet'
      planetID:
        type: integer
      revives:
        type: integer
      timePlayed:
        type: integer
      updatedAt:
        type: string
    type: object
  model.Stratagem:
    properties:
      activation:
        type: integer
      codeName:
        type: string
      cooldown:
        type: integer
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      groupUserMissions:
        items:
          $ref: '#/definitions/model.GroupUserMission'
        type: array
      id:
        type: integer
      imageURL:
        type: string
      keys:
        items:
          $ref: '#/definitions/enum.StratagemKeys'
        type: array
      name:
        type: string
      type:
        $ref: '#/definitions/enum.StratagemType'
      updatedAt:
        type: string
      useCount:
        type: integer
      useType:
        $ref: '#/definitions/enum.StratagemUseType'
    type: object
  model.Token:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      token:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/model.User'
      userId:
        type: integer
    type: object
  model.TokenFcm:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      token:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/model.User'
      userID:
        type: integer
    type: object
  model.User:
    properties:
      avatarUrl:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      groupUsers:
        items:
          $ref: '#/definitions/model.GroupUser'
        type: array
      id:
        type: integer
      password:
        type: string
      role:
        $ref: '#/definitions/enum.Role'
      steamId:
        type: string
      tokenFcm:
        $ref: '#/definitions/model.TokenFcm'
      tokens:
        items:
          $ref: '#/definitions/model.Token'
        type: array
      updatedAt:
        type: string
      username:
        type: string
    type: object
  model.Waypoint:
    properties:
      x:
        type: number
      "y":
        type: number
    type: object
  server.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  server.Event:
    properties:
      defence:
        items:
          $ref: '#/definitions/model.Defence'
        type: array
      liberation:
        items:
          $ref: '#/definitions/model.Liberation'
        type: array
    type: object
  server.Me:
    properties:
      AvatarUrl:
        type: string
      SteamId:
        type: string
      Username:
        type: string
    type: object
  server.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  time.Duration:
    enum:
    - -9223372036854775808
    - 9223372036854775807
    - 1
    - 1000
    - 1000000
    - 1000000000
    - 60000000000
    - 3600000000000
    type: integer
    x-enum-varnames:
    - minDuration
    - maxDuration
    - Nanosecond
    - Microsecond
    - Millisecond
    - Second
    - Minute
    - Hour
  validators.FeatureEnabled:
    properties:
      enabled:
        type: boolean
    required:
    - enabled
    type: object
  validators.Group:
    properties:
      description:
        type: string
      difficulty:
        $ref: '#/definitions/enum.Difficulty'
      name:
        type: string
      planetId:
        type: integer
      public:
        type: boolean
      startAt:
        default: "2024-08-02 15:04:05"
        type: string
    required:
    - difficulty
    - name
    - planetId
    - public
    - startAt
    type: object
  validators.GroupCode:
    properties:
      code:
        type: string
    required:
    - code
    type: object
  validators.GroupUpdate:
    properties:
      description:
        type: string
      difficulty:
        $ref: '#/definitions/enum.Difficulty'
      name:
        type: string
      public:
        type: boolean
      startAt:
        default: "2024-08-02 15:04:05"
        type: string
    required:
    - difficulty
    - name
    - public
    - startAt
    type: object
  validators.Mission:
    properties:
      groupID:
        type: integer
      instructions:
        type: string
      name:
        type: string
      objectiveTypes:
        items:
          $ref: '#/definitions/enum.ObjectiveType'
        type: array
    required:
    - name
    - objectiveTypes
    type: object
  validators.TokenFcm:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  validators.UserMission:
    properties:
      stratagems:
        items:
          type: integer
        maxItems: 4
        type: array
    required:
    - stratagems
    type: object
info:
  contact:
    email: support@for-democracy
    name: Support Team
  description: This is the API for For Democracy
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: For Democracy API
  version: "1.0"
paths:
  /events:
    get:
      description: Get all events
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.Event'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Get all events
      tags:
      - events
  /events-stream/:
    get:
      description: Get events stream
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Planet'
            type: array
      summary: Get events stream
      tags:
      - stream
  /features:
    get:
      description: Get features
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Feature'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Get features
      tags:
      - features
  /features/{code}:
    patch:
      description: Toggle feature using code
      parameters:
      - description: Feature code
        in: path
        name: code
        required: true
        type: string
      - description: Properties to update
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/validators.FeatureEnabled'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Feature'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Toggle feature
      tags:
      - features
  /groups:
    get:
      description: Get groups
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Group'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Get groups
      tags:
      - groups
    post:
      consumes:
      - application/json
      description: Create a new group
      parameters:
      - description: Group object that needs to be created
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/validators.Group'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Group'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Create a new group
      tags:
      - groups
  /groups/{id}:
    delete:
      description: Delete a group
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Delete a group
      tags:
      - groups
    get:
      description: Get a group by ID
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Group'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Get a group by ID
      tags:
      - groups
    put:
      consumes:
      - application/json
      description: Update a group
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      - description: Properties to update
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/validators.GroupUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Group'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Update a group
      tags:
      - groups
  /groups/{id}/join:
    post:
      consumes:
      - application/json
      description: Join a group
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.GroupUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Join a group
      tags:
      - groups
  /groups/{id}/leave:
    post:
      consumes:
      - application/json
      description: Leave a group
      parameters:
      - description: Group ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Leave a group
      tags:
      - groups
  /groups/join:
    post:
      consumes:
      - application/json
      description: Join a group with code
      parameters:
      - description: Code to join
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/validators.GroupCode'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.GroupUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Join a group with code
      tags:
      - groups
  /missions:
    post:
      description: Create a mission
      parameters:
      - description: Mission object that needs to be created
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/validators.Mission'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/validators.Mission'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Create a mission
      tags:
      - missions
  /missions/{id}:
    delete:
      description: Delete a mission
      parameters:
      - description: Mission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Delete a mission
      tags:
      - missions
    get:
      description: Get mission by ID
      parameters:
      - description: Mission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Mission'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Get mission by ID
      tags:
      - missions
    put:
      description: Update a mission
      parameters:
      - description: Mission ID
        in: path
        name: id
        required: true
        type: integer
      - description: Mission properties that needs to be updated
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/validators.Mission'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/validators.Mission'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Update a mission
      tags:
      - missions
  /missions/{id}/edit:
    put:
      description: Update the user mission stratagems
      parameters:
      - description: Mission ID
        in: path
        name: id
        required: true
        type: integer
      - description: Mission properties that needs to be updated
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/validators.UserMission'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GroupUserMission'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Update user mission
      tags:
      - missions
  /missions/{id}/join:
    post:
      description: Join a mission
      parameters:
      - description: Mission ID
        in: path
        name: id
        required: true
        type: integer
      - description: Mission properties that needs to be updated
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/validators.UserMission'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.GroupUserMission'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Join a mission
      tags:
      - missions
  /missions/{id}/leave:
    post:
      description: Leave a mission
      parameters:
      - description: Mission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Leave a mission
      tags:
      - missions
  /oauth/{provider}:
    get:
      description: Route used to authenticate the user
      parameters:
      - description: Provider name
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/goth.User'
      summary: Authenticate the user
      tags:
      - authentication
  /oauth/{provider}/callback:
    get:
      description: Route used by the provide to send the user back after authentication
      parameters:
      - description: Provider name
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/goth.User'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Get the user after authentication is complete from the provider
      tags:
      - authentication
  /oauth/logout/{provider}:
    get:
      description: Route used to log the user out
      parameters:
      - description: Provider name
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Log the user out
      tags:
      - authentication
  /oauth/me:
    get:
      description: Route used to get the user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.Me'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Get the user
      tags:
      - authentication
  /objectifs:
    get:
      description: Get all objectifs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Objective'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Get all objectifs
      tags:
      - objectifs
  /objectifs/{name}:
    get:
      description: Get an objectif
      parameters:
      - description: Objectif name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Objective'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Get an objectif
      tags:
      - objectifs
  /planets:
    get:
      description: Get all planets
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Planet'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Get all planets
      tags:
      - planets
  /planets-event:
    get:
      description: Get all planets with events
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Planet'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Get all planets with events
      tags:
      - planets
  /planets-stream/:
    get:
      description: Get planets stream
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Planet'
            type: array
      summary: Get planets stream
      tags:
      - stream
  /planets/{id}:
    get:
      description: Get planet by ID
      parameters:
      - description: Planet ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Planet'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Get planet by ID
      tags:
      - planets
  /stratagems:
    get:
      description: Get all stratagems
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Stratagem'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Get all stratagems
      tags:
      - stratagems
  /stratagems/{id}:
    get:
      description: Get a stratagem
      parameters:
      - description: Stratagem ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Stratagem'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Get a stratagem
      tags:
      - stratagems
  /token-fcm:
    post:
      consumes:
      - application/json
      description: Route used to persist the FCM token
      parameters:
      - description: Token data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/validators.TokenFcm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server.SuccessResponse'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/server.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Persist the FCM token
      tags:
      - token-fcm
  /users:
    get:
      description: Get users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Feature'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/server.ErrorResponse'
      summary: Get users
      tags:
      - users
swagger: "2.0"
